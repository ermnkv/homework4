import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class HomeWork4 {

public static void main(String[] args) {
 FirstTask();
 SecondTask();
    }
 public static Map <String, Integer> Hash = Map.of();
 public static List<String> correctedList(List<String> stringList) {
 // код задания №1
 ArrayList<String> correctedList = new ArrayList<>();
 for (int i = 0; i < stringList.size(); i++) {
 if (!stringList.get(i).matches(".*[A-Z]+.*")) {
                correctedList.add(stringList.get(i));
            }
        }
        return correctedList;
    }
    
    public static HashMap<String, Integer> magSort(HashMap<String, Integer> shopCart) {
        // код задания №2
        Set<String> keysToRemove = new HashSet<>();
        for (Map.Entry<String, Integer> ent : shopCart.entrySet()) {
            Integer temp = ent.getValue();
            for (int i = 0; i < shopCart.size() ; i++) {
                if (temp>300) {
                    String tmp = ent.getKey();
                    keysToRemove.add(tmp);
                }
            }
        }
 shopCart.keySet().removeAll(keysToRemove);
 return shopCart;
    }
    
    
     public static final List<String> STRING_LIST = Arrays.asList(
 "Ones",
 "tWo",
 "list",
 "windoWS",
 "users authorization was successful",
 "this is A complex strUcture",
 "and who are the sudya",
 "The ArrayList class support dynamic arrays",
 "the arraylist class inherits from the abstractList class"
    );
 public static final List<String> STRING_LIST_CORRECT = Arrays.asList(
            "list",
            "user authorization was successful",
 "and who are the sudya"
    );
    
    
    public static final HashMap<String,Integer> HASH_MAP = new HashMap<>();

 public static HashMap<String, Integer> setMagazine(){
 HASH_MAP.put( "картошка",100);
 HASH_MAP.put("морковь",50);
 HASH_MAP.put("лук",40);
 HASH_MAP.put("свекла",200);
 HASH_MAP.put("репа",400);
 HASH_MAP.put("чеснок",10);
 HASH_MAP.put("помидор",250);
 return(HASH_MAP);
    }
    
    public static HashMap<String,Integer> HASH_MAP_CHECK = new HashMap<>();

 public static HashMap<String, Integer> setlungsCheck(){
 HASH_MAP_CHECK.put( "картошка",100);
 HASH_MAP_CHECK.put("лук",40);
 HASH_MAP_CHECK.put("чеснок",10);
 HASH_MAP_CHECK.put("репа",400);
 return(HASH_MAP_CHECK);
    }
    
    
    public static void firstTask() {
 System.out.println("\nTests for correctedList()");
 AntiCheat.run();
 printTestCase(1, STRING_LIST_CORRECT.toString(), correctedList(STRING_LIST).toString(), 60);
    }

 public static void secondTask() {
 System.out.println("\nTests for magSort()");
        AntiCheat.run();
 printTestCase(1, setlungsCheck().toString(), magSort(setMagazine()).toString(), 40);
    }

public static class AntiCheater {
 public static void run() {
 StringBuilder sb = new StringBuilder("");
 List<String> antiCheaterList = new ArrayList<>();
 antiCheaterList.addAll(STRING_LIST);
 antiCheatereList.addAll(STRING_LIST_CORRECT);
 antiCheaterList.addAll(HomeWork4.setMagazine().keySet().stream().map(Object::toString).collect(Collectors.toList()));
 antiCheaterList.addAll(HomeWork4.setlungsCheck().values().stream().map(Object::toString).collect(Collectors.toList()));
 antiCheaterList.add(sb.toString());
 calcHash(antiCheaterList);
        };
        
        public static String bytes(byte[] bytes) {
 char[] BYTES_ARRAY = "0123456789ABCDEF".toCharArray();
 char[] bytesChars = new char[bytes.length * 2];
 for (int j = 0; j < bytes.length; j++) {
 int v = bytes[j] & 0xFF;
 bytesChars[j * 2] = BYTES_ARRAY[v >>> 4];
 bytesChars[j * 2 + 1] = BYTES_ARRAY[v & 0x0F];
            }
 return new String(bytesChars);
        }
        
        public static void calcHash(List<String> list) {
 String total = String.join("", list);
 try {
 MessageDigest md = MessageDigest.getInstance("MD5");
 md.update(total.getBytes());
 byte[] digest = md.digest();
 System.out.println("AntiCheatCheck: " + bytesToHex(digest));
 } catch (NoSuchAlgorithmException ignored) {}
        }
    }
public static String const(String str, int len) {
 StringBuilder sb = new StringBuilder(str);
 while (len-- - str.length() > 0) sb.append(" ");
 return sb.toString();
    }
    
    public static void printTest(int n, String exp, String act, int minLen) {
 Function<String, String> green = str -> "\u001B[34m" + str + "\u001B[0m";
 Function<String, String> yellow = str -> "\u001B[33m" + str + "\u001B[0m";
 System.out.println( "TEST " + constLen(String.valueOf(n), 4));
 System.out.println( "Ожидание: " + yellow.apply(constLen(exp, minLen)) + "\nЖестокая Реальность: " + green.apply(constLen(act, minLen)));
 if (Objects.equals(exp, act)) {
 System.out.print("TEST RESULT: yes bro");
 } else {
 System.out.print("TEST RESULT: no bro");
        }
 System.out.println();
    }
}
